# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import fleet_manager_pb2 as fleet__manager__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in fleet_manager_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FleetManagerStub(object):
    """Service definition for robot fleet management
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterRobot = channel.unary_unary(
                '/robot_fleet.FleetManager/RegisterRobot',
                request_serializer=fleet__manager__pb2.RegisterRobotRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.RegisterRobotResponse.FromString,
                _registered_method=True)
        self.UnregisterRobot = channel.unary_unary(
                '/robot_fleet.FleetManager/UnregisterRobot',
                request_serializer=fleet__manager__pb2.UnregisterRobotRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.UnregisterRobotResponse.FromString,
                _registered_method=True)
        self.DeployRobot = channel.unary_unary(
                '/robot_fleet.FleetManager/DeployRobot',
                request_serializer=fleet__manager__pb2.DeployRobotRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.DeployRobotResponse.FromString,
                _registered_method=True)
        self.UndeployRobot = channel.unary_unary(
                '/robot_fleet.FleetManager/UndeployRobot',
                request_serializer=fleet__manager__pb2.UndeployRobotRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.UndeployRobotResponse.FromString,
                _registered_method=True)
        self.ListRobots = channel.unary_unary(
                '/robot_fleet.FleetManager/ListRobots',
                request_serializer=fleet__manager__pb2.ListRobotsRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.ListRobotsResponse.FromString,
                _registered_method=True)
        self.GetRobotStatus = channel.unary_unary(
                '/robot_fleet.FleetManager/GetRobotStatus',
                request_serializer=fleet__manager__pb2.GetRobotStatusRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.RobotStatus.FromString,
                _registered_method=True)
        self.CreatePlan = channel.unary_unary(
                '/robot_fleet.FleetManager/CreatePlan',
                request_serializer=fleet__manager__pb2.CreatePlanRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.CreatePlanResponse.FromString,
                _registered_method=True)
        self.GetPlan = channel.unary_unary(
                '/robot_fleet.FleetManager/GetPlan',
                request_serializer=fleet__manager__pb2.GetPlanRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.GetPlanResponse.FromString,
                _registered_method=True)
        self.ListPlans = channel.unary_unary(
                '/robot_fleet.FleetManager/ListPlans',
                request_serializer=fleet__manager__pb2.ListPlansRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.ListPlansResponse.FromString,
                _registered_method=True)
        self.DeletePlan = channel.unary_unary(
                '/robot_fleet.FleetManager/DeletePlan',
                request_serializer=fleet__manager__pb2.DeletePlanRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.DeletePlanResponse.FromString,
                _registered_method=True)
        self.CreateTask = channel.unary_unary(
                '/robot_fleet.FleetManager/CreateTask',
                request_serializer=fleet__manager__pb2.CreateTaskRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.CreateTaskResponse.FromString,
                _registered_method=True)
        self.GetTask = channel.unary_unary(
                '/robot_fleet.FleetManager/GetTask',
                request_serializer=fleet__manager__pb2.GetTaskRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.GetTaskResponse.FromString,
                _registered_method=True)
        self.ListTasks = channel.unary_unary(
                '/robot_fleet.FleetManager/ListTasks',
                request_serializer=fleet__manager__pb2.ListTasksRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.ListTasksResponse.FromString,
                _registered_method=True)
        self.DeleteTask = channel.unary_unary(
                '/robot_fleet.FleetManager/DeleteTask',
                request_serializer=fleet__manager__pb2.DeleteTaskRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.DeleteTaskResponse.FromString,
                _registered_method=True)
        self.CreateGoal = channel.unary_unary(
                '/robot_fleet.FleetManager/CreateGoal',
                request_serializer=fleet__manager__pb2.CreateGoalRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.CreateGoalResponse.FromString,
                _registered_method=True)
        self.GetGoal = channel.unary_unary(
                '/robot_fleet.FleetManager/GetGoal',
                request_serializer=fleet__manager__pb2.GetGoalRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.GetGoalResponse.FromString,
                _registered_method=True)
        self.ListGoals = channel.unary_unary(
                '/robot_fleet.FleetManager/ListGoals',
                request_serializer=fleet__manager__pb2.ListGoalsRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.ListGoalsResponse.FromString,
                _registered_method=True)
        self.DeleteGoal = channel.unary_unary(
                '/robot_fleet.FleetManager/DeleteGoal',
                request_serializer=fleet__manager__pb2.DeleteGoalRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.DeleteGoalResponse.FromString,
                _registered_method=True)
        self.AddWorldStatement = channel.unary_unary(
                '/robot_fleet.FleetManager/AddWorldStatement',
                request_serializer=fleet__manager__pb2.AddWorldStatementRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.AddWorldStatementResponse.FromString,
                _registered_method=True)
        self.GetWorldStatement = channel.unary_unary(
                '/robot_fleet.FleetManager/GetWorldStatement',
                request_serializer=fleet__manager__pb2.GetWorldStatementRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.GetWorldStatementResponse.FromString,
                _registered_method=True)
        self.ListWorldStatements = channel.unary_unary(
                '/robot_fleet.FleetManager/ListWorldStatements',
                request_serializer=fleet__manager__pb2.ListWorldStatementsRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.ListWorldStatementsResponse.FromString,
                _registered_method=True)
        self.DeleteWorldStatement = channel.unary_unary(
                '/robot_fleet.FleetManager/DeleteWorldStatement',
                request_serializer=fleet__manager__pb2.DeleteWorldStatementRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.DeleteWorldStatementResponse.FromString,
                _registered_method=True)
        self.StartPlan = channel.unary_unary(
                '/robot_fleet.FleetManager/StartPlan',
                request_serializer=fleet__manager__pb2.StartPlanRequest.SerializeToString,
                response_deserializer=fleet__manager__pb2.StartPlanResponse.FromString,
                _registered_method=True)


class FleetManagerServicer(object):
    """Service definition for robot fleet management
    """

    def RegisterRobot(self, request, context):
        """Register robot metadata with the central node (stores in etcd)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnregisterRobot(self, request, context):
        """Unregister a robot from the central node
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeployRobot(self, request, context):
        """Deploy a container for a registered robot using stored configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UndeployRobot(self, request, context):
        """Undeploy (stop and remove) a robot container
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRobots(self, request, context):
        """List all robots
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRobotStatus(self, request, context):
        """Get detailed status of a specific robot
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePlan(self, request, context):
        """Planning
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPlan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPlans(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePlan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTask(self, request, context):
        """Task management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateGoal(self, request, context):
        """Goal management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGoal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGoals(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteGoal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddWorldStatement(self, request, context):
        """World State Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorldStatement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWorldStatements(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteWorldStatement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartPlan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FleetManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterRobot': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterRobot,
                    request_deserializer=fleet__manager__pb2.RegisterRobotRequest.FromString,
                    response_serializer=fleet__manager__pb2.RegisterRobotResponse.SerializeToString,
            ),
            'UnregisterRobot': grpc.unary_unary_rpc_method_handler(
                    servicer.UnregisterRobot,
                    request_deserializer=fleet__manager__pb2.UnregisterRobotRequest.FromString,
                    response_serializer=fleet__manager__pb2.UnregisterRobotResponse.SerializeToString,
            ),
            'DeployRobot': grpc.unary_unary_rpc_method_handler(
                    servicer.DeployRobot,
                    request_deserializer=fleet__manager__pb2.DeployRobotRequest.FromString,
                    response_serializer=fleet__manager__pb2.DeployRobotResponse.SerializeToString,
            ),
            'UndeployRobot': grpc.unary_unary_rpc_method_handler(
                    servicer.UndeployRobot,
                    request_deserializer=fleet__manager__pb2.UndeployRobotRequest.FromString,
                    response_serializer=fleet__manager__pb2.UndeployRobotResponse.SerializeToString,
            ),
            'ListRobots': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRobots,
                    request_deserializer=fleet__manager__pb2.ListRobotsRequest.FromString,
                    response_serializer=fleet__manager__pb2.ListRobotsResponse.SerializeToString,
            ),
            'GetRobotStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRobotStatus,
                    request_deserializer=fleet__manager__pb2.GetRobotStatusRequest.FromString,
                    response_serializer=fleet__manager__pb2.RobotStatus.SerializeToString,
            ),
            'CreatePlan': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePlan,
                    request_deserializer=fleet__manager__pb2.CreatePlanRequest.FromString,
                    response_serializer=fleet__manager__pb2.CreatePlanResponse.SerializeToString,
            ),
            'GetPlan': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPlan,
                    request_deserializer=fleet__manager__pb2.GetPlanRequest.FromString,
                    response_serializer=fleet__manager__pb2.GetPlanResponse.SerializeToString,
            ),
            'ListPlans': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPlans,
                    request_deserializer=fleet__manager__pb2.ListPlansRequest.FromString,
                    response_serializer=fleet__manager__pb2.ListPlansResponse.SerializeToString,
            ),
            'DeletePlan': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePlan,
                    request_deserializer=fleet__manager__pb2.DeletePlanRequest.FromString,
                    response_serializer=fleet__manager__pb2.DeletePlanResponse.SerializeToString,
            ),
            'CreateTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTask,
                    request_deserializer=fleet__manager__pb2.CreateTaskRequest.FromString,
                    response_serializer=fleet__manager__pb2.CreateTaskResponse.SerializeToString,
            ),
            'GetTask': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTask,
                    request_deserializer=fleet__manager__pb2.GetTaskRequest.FromString,
                    response_serializer=fleet__manager__pb2.GetTaskResponse.SerializeToString,
            ),
            'ListTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTasks,
                    request_deserializer=fleet__manager__pb2.ListTasksRequest.FromString,
                    response_serializer=fleet__manager__pb2.ListTasksResponse.SerializeToString,
            ),
            'DeleteTask': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTask,
                    request_deserializer=fleet__manager__pb2.DeleteTaskRequest.FromString,
                    response_serializer=fleet__manager__pb2.DeleteTaskResponse.SerializeToString,
            ),
            'CreateGoal': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGoal,
                    request_deserializer=fleet__manager__pb2.CreateGoalRequest.FromString,
                    response_serializer=fleet__manager__pb2.CreateGoalResponse.SerializeToString,
            ),
            'GetGoal': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGoal,
                    request_deserializer=fleet__manager__pb2.GetGoalRequest.FromString,
                    response_serializer=fleet__manager__pb2.GetGoalResponse.SerializeToString,
            ),
            'ListGoals': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGoals,
                    request_deserializer=fleet__manager__pb2.ListGoalsRequest.FromString,
                    response_serializer=fleet__manager__pb2.ListGoalsResponse.SerializeToString,
            ),
            'DeleteGoal': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteGoal,
                    request_deserializer=fleet__manager__pb2.DeleteGoalRequest.FromString,
                    response_serializer=fleet__manager__pb2.DeleteGoalResponse.SerializeToString,
            ),
            'AddWorldStatement': grpc.unary_unary_rpc_method_handler(
                    servicer.AddWorldStatement,
                    request_deserializer=fleet__manager__pb2.AddWorldStatementRequest.FromString,
                    response_serializer=fleet__manager__pb2.AddWorldStatementResponse.SerializeToString,
            ),
            'GetWorldStatement': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorldStatement,
                    request_deserializer=fleet__manager__pb2.GetWorldStatementRequest.FromString,
                    response_serializer=fleet__manager__pb2.GetWorldStatementResponse.SerializeToString,
            ),
            'ListWorldStatements': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWorldStatements,
                    request_deserializer=fleet__manager__pb2.ListWorldStatementsRequest.FromString,
                    response_serializer=fleet__manager__pb2.ListWorldStatementsResponse.SerializeToString,
            ),
            'DeleteWorldStatement': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteWorldStatement,
                    request_deserializer=fleet__manager__pb2.DeleteWorldStatementRequest.FromString,
                    response_serializer=fleet__manager__pb2.DeleteWorldStatementResponse.SerializeToString,
            ),
            'StartPlan': grpc.unary_unary_rpc_method_handler(
                    servicer.StartPlan,
                    request_deserializer=fleet__manager__pb2.StartPlanRequest.FromString,
                    response_serializer=fleet__manager__pb2.StartPlanResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'robot_fleet.FleetManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('robot_fleet.FleetManager', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FleetManager(object):
    """Service definition for robot fleet management
    """

    @staticmethod
    def RegisterRobot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/RegisterRobot',
            fleet__manager__pb2.RegisterRobotRequest.SerializeToString,
            fleet__manager__pb2.RegisterRobotResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnregisterRobot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/UnregisterRobot',
            fleet__manager__pb2.UnregisterRobotRequest.SerializeToString,
            fleet__manager__pb2.UnregisterRobotResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeployRobot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/DeployRobot',
            fleet__manager__pb2.DeployRobotRequest.SerializeToString,
            fleet__manager__pb2.DeployRobotResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UndeployRobot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/UndeployRobot',
            fleet__manager__pb2.UndeployRobotRequest.SerializeToString,
            fleet__manager__pb2.UndeployRobotResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListRobots(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/ListRobots',
            fleet__manager__pb2.ListRobotsRequest.SerializeToString,
            fleet__manager__pb2.ListRobotsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRobotStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/GetRobotStatus',
            fleet__manager__pb2.GetRobotStatusRequest.SerializeToString,
            fleet__manager__pb2.RobotStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreatePlan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/CreatePlan',
            fleet__manager__pb2.CreatePlanRequest.SerializeToString,
            fleet__manager__pb2.CreatePlanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPlan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/GetPlan',
            fleet__manager__pb2.GetPlanRequest.SerializeToString,
            fleet__manager__pb2.GetPlanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListPlans(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/ListPlans',
            fleet__manager__pb2.ListPlansRequest.SerializeToString,
            fleet__manager__pb2.ListPlansResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeletePlan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/DeletePlan',
            fleet__manager__pb2.DeletePlanRequest.SerializeToString,
            fleet__manager__pb2.DeletePlanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/CreateTask',
            fleet__manager__pb2.CreateTaskRequest.SerializeToString,
            fleet__manager__pb2.CreateTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/GetTask',
            fleet__manager__pb2.GetTaskRequest.SerializeToString,
            fleet__manager__pb2.GetTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/ListTasks',
            fleet__manager__pb2.ListTasksRequest.SerializeToString,
            fleet__manager__pb2.ListTasksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/DeleteTask',
            fleet__manager__pb2.DeleteTaskRequest.SerializeToString,
            fleet__manager__pb2.DeleteTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateGoal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/CreateGoal',
            fleet__manager__pb2.CreateGoalRequest.SerializeToString,
            fleet__manager__pb2.CreateGoalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGoal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/GetGoal',
            fleet__manager__pb2.GetGoalRequest.SerializeToString,
            fleet__manager__pb2.GetGoalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListGoals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/ListGoals',
            fleet__manager__pb2.ListGoalsRequest.SerializeToString,
            fleet__manager__pb2.ListGoalsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteGoal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/DeleteGoal',
            fleet__manager__pb2.DeleteGoalRequest.SerializeToString,
            fleet__manager__pb2.DeleteGoalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddWorldStatement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/AddWorldStatement',
            fleet__manager__pb2.AddWorldStatementRequest.SerializeToString,
            fleet__manager__pb2.AddWorldStatementResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWorldStatement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/GetWorldStatement',
            fleet__manager__pb2.GetWorldStatementRequest.SerializeToString,
            fleet__manager__pb2.GetWorldStatementResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListWorldStatements(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/ListWorldStatements',
            fleet__manager__pb2.ListWorldStatementsRequest.SerializeToString,
            fleet__manager__pb2.ListWorldStatementsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteWorldStatement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/DeleteWorldStatement',
            fleet__manager__pb2.DeleteWorldStatementRequest.SerializeToString,
            fleet__manager__pb2.DeleteWorldStatementResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartPlan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/robot_fleet.FleetManager/StartPlan',
            fleet__manager__pb2.StartPlanRequest.SerializeToString,
            fleet__manager__pb2.StartPlanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
